<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="    
           http://www.springframework.org/schema/beans    
           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
           http://www.springframework.org/schema/tx  
           http://www.springframework.org/schema/tx/spring-tx-4.3.xsd   
           http://www.springframework.org/schema/aop    
           http://www.springframework.org/schema/aop/spring-aop-4.3.xsd  
           http://www.springframework.org/schema/context    
           http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 引入jdbc配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:properties/*.properties</value>
				<!--要是有多个配置文件，只需在这里继续添加即可 -->
			</list>
		</property>
	</bean>

	<!-- 配置数据源 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc_driverClassName}" />
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
	</bean>

	<!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.sunvins.dao" />
	</bean>

	<!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:mapper/*.xml" />
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
	</bean>

	<!-- 自动扫描注解的Service -->
	<context:component-scan base-package="com.sunvins.service" />

    <!-- ================================事务相关控制================================================= -->  
    <bean name="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource"></property>  
    </bean>  
  
    <tx:advice id="userTxAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"  
                rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException" />  
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"  
                rollback-for="java.lang.RuntimeException" />  
            <tx:method name="update*" propagation="REQUIRED" read-only="false"  
                rollback-for="java.lang.Exception" />  
            <tx:method name="find*" propagation="SUPPORTS" />  
            <tx:method name="get*" propagation="SUPPORTS" />  
            <tx:method name="select*" propagation="SUPPORTS" />  
        </tx:attributes>  
    </tx:advice>  
  
    <aop:config>  
        <aop:pointcut id="pc"  
            expression="execution(public * com.sunvins.service.*.*(..))" /> <!--把事务控制在Service层 -->  
        <aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />  
    </aop:config> 
</beans>  
 